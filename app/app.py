import streamlit as st
import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import math
import io
import os

# Dictionary for multilingual support
translations = {
    "en": {
        "page_title": "Circle Diameter Viewer",
        "app_title": "Circle Diameter Viewer",
        "app_description": "Upload an image to detect circles and view their diameters, radii, and other properties.",
        "detection_params": "Detection Parameters",
        "advanced_options": "Show Advanced Options",
        "dp_title": "DP (Accumulator Resolution)",
        "dp_help": "Inverse ratio of the accumulator resolution to the image resolution",
        "min_dist_title": "Minimum Distance",
        "min_dist_help": "Minimum distance between detected circle centers",
        "param1_title": "Edge Detection Threshold",
        "param1_help": "Gradient value used for edge detection",
        "param2_title": "Circle Detection Threshold",
        "param2_help": "Accumulator threshold - smaller values detect more circles",
        "min_radius_title": "Minimum Radius",
        "min_radius_help": "Minimum circle radius in pixels",
        "max_radius_title": "Maximum Radius",
        "max_radius_help": "Maximum circle radius in pixels",
        "preprocessing_options": "Pre-processing Options",
        "apply_blur": "Apply Gaussian Blur",
        "blur_kernel": "Blur Kernel Size",
        "blur_kernel_help": "Size of the Gaussian blur kernel (must be odd)",
        "enhance_contrast": "Enhance Contrast",
        "clahe_clip": "CLAHE Clip Limit",
        "clahe_clip_help": "Clip limit for contrast enhancement",
        "apply_canny": "Apply Canny Edge Detection",
        "canny_low": "Canny Low Threshold",
        "canny_low_help": "Low threshold for Canny edge detection",
        "canny_high": "Canny High Threshold",
        "canny_high_help": "High threshold for Canny edge detection",
        "upload_image": "Upload an image",
        "use_example": "Use example image",
        "upload_prompt": "### Please upload an image to begin.\nThe application will detect circles in the image and allow you to view their measurements.\n\n#### Tips for best results:\n- Use images with clear, well-defined circles\n- Adjust the detection parameters in the sidebar if circles are not properly detected\n- For accurate real-world measurements, provide the correct scale (pixels per unit)",
        "detected_circles": "Image with Detected Circles",
        "click_prompt": "üëÜ Click on a circle to select it and view its details",
        "reset_selection": "Reset Selection",
        "x_coordinate": "X coordinate",
        "y_coordinate": "Y coordinate",
        "select_circle_coords": "Select Circle at Coordinates",
        "no_circle_warning": "No circle found at or near these coordinates",
        "show_preprocessed": "Show Pre-processed Image",
        "preprocessed_image": "Pre-processed Image",
        "circle_info": "Circle Information",
        "num_circles": "Number of circles detected: ",
        "select_circle": "Select a circle to view details",
        "circle_properties": "#### Circle Properties",
        "center": "**Center:** ",
        "radius": "**Radius:** ",
        "diameter": "**Diameter:** ",
        "area": "**Area:** ",
        "circumference": "**Circumference:** ",
        "pixels": " pixels",
        "sq_pixels": " sq. pixels",
        "scale_section": "#### Optional: Scale to Real-world Units",
        "scale_factor": "Pixels per unit (e.g., pixels/mm)",
        "units": " units",
        "sq_units": " sq. units",
        "no_circles": "No circles detected. Try adjusting the parameters in the sidebar.",
        "suggestions": "#### Suggestions to improve detection:\n1. Try decreasing the Circle Detection Threshold (param2)\n2. Adjust the Min/Max Radius values to match your circles\n3. Increase Edge Detection Threshold (param1) for clearer circles\n4. Enable Advanced Options for more fine-grained control",
        "quick_guide": "## Quick Guide for New Users",
        "quick_guide_content": """
        ### Welcome to the Circle Diameter Viewer! üëã

        This app helps you measure circles in your images. Here's how to use it:

        #### üîç Basic Steps:
        1. **Upload a picture** using the file uploader above
        2. **Circles will be automatically detected** and numbered in the image
        3. **Select a circle** either by:
           - Clicking on the "Select Circle at Coordinates" button after entering X and Y values
           - Using the dropdown menu on the right side
        4. **View measurements** including radius, diameter, and area of the selected circle

        #### üí° Need Better Results?
        - If circles aren't detected correctly, adjust the "Circle Detection Threshold" in the left sidebar (lower values find more circles)
        - For real-world measurements (like centimeters), use the "Optional: Scale to Real-world Units" section
        
        #### üõ†Ô∏è Tips for Success:
        - Use clear images with well-defined circles
        - Make sure there's good contrast between circles and background
        - Try the example image first to see how the app works
        """
    },
    "vi": {
        "page_title": "C√¥ng C·ª• ƒêo ƒê∆∞·ªùng K√≠nh H√¨nh Tr√≤n",
        "app_title": "C√¥ng C·ª• ƒêo ƒê∆∞·ªùng K√≠nh H√¨nh Tr√≤n",
        "app_description": "T·∫£i l√™n m·ªôt h√¨nh ·∫£nh ƒë·ªÉ ph√°t hi·ªán c√°c h√¨nh tr√≤n v√† xem ƒë∆∞·ªùng k√≠nh, b√°n k√≠nh v√† c√°c thu·ªôc t√≠nh kh√°c.",
        "detection_params": "Th√¥ng S·ªë Ph√°t Hi·ªán",
        "advanced_options": "Hi·ªÉn Th·ªã T√πy Ch·ªçn N√¢ng Cao",
        "dp_title": "DP (ƒê·ªô Ph√¢n Gi·∫£i B·ªô T√≠ch L≈©y)",
        "dp_help": "T·ª∑ l·ªá ngh·ªãch c·ªßa ƒë·ªô ph√¢n gi·∫£i b·ªô t√≠ch l≈©y so v·ªõi ƒë·ªô ph√¢n gi·∫£i h√¨nh ·∫£nh",
        "min_dist_title": "Kho·∫£ng C√°ch T·ªëi Thi·ªÉu",
        "min_dist_help": "Kho·∫£ng c√°ch t·ªëi thi·ªÉu gi·ªØa c√°c t√¢m h√¨nh tr√≤n ƒë∆∞·ª£c ph√°t hi·ªán",
        "param1_title": "Ng∆∞·ª°ng Ph√°t Hi·ªán C·∫°nh",
        "param1_help": "Gi√° tr·ªã gradient ƒë∆∞·ª£c s·ª≠ d·ª•ng cho ph√°t hi·ªán c·∫°nh",
        "param2_title": "Ng∆∞·ª°ng Ph√°t Hi·ªán H√¨nh Tr√≤n",
        "param2_help": "Ng∆∞·ª°ng b·ªô t√≠ch l≈©y - gi√° tr·ªã nh·ªè h∆°n ph√°t hi·ªán nhi·ªÅu h√¨nh tr√≤n h∆°n",
        "min_radius_title": "B√°n K√≠nh T·ªëi Thi·ªÉu",
        "min_radius_help": "B√°n k√≠nh t·ªëi thi·ªÉu c·ªßa h√¨nh tr√≤n t√≠nh b·∫±ng pixel",
        "max_radius_title": "B√°n K√≠nh T·ªëi ƒêa",
        "max_radius_help": "B√°n k√≠nh t·ªëi ƒëa c·ªßa h√¨nh tr√≤n t√≠nh b·∫±ng pixel",
        "preprocessing_options": "T√πy Ch·ªçn Ti·ªÅn X·ª≠ L√Ω",
        "apply_blur": "√Åp D·ª•ng L√†m M·ªù Gaussian",
        "blur_kernel": "K√≠ch Th∆∞·ªõc Kernel L√†m M·ªù",
        "blur_kernel_help": "K√≠ch th∆∞·ªõc c·ªßa kernel l√†m m·ªù Gaussian (ph·∫£i l√† s·ªë l·∫ª)",
        "enhance_contrast": "TƒÉng C∆∞·ªùng ƒê·ªô T∆∞∆°ng Ph·∫£n",
        "clahe_clip": "Gi·ªõi H·∫°n Clip CLAHE",
        "clahe_clip_help": "Gi·ªõi h·∫°n clip cho vi·ªác tƒÉng c∆∞·ªùng ƒë·ªô t∆∞∆°ng ph·∫£n",
        "apply_canny": "√Åp D·ª•ng Ph√°t Hi·ªán C·∫°nh Canny",
        "canny_low": "Ng∆∞·ª°ng Th·∫•p Canny",
        "canny_low_help": "Ng∆∞·ª°ng th·∫•p cho ph√°t hi·ªán c·∫°nh Canny",
        "canny_high": "Ng∆∞·ª°ng Cao Canny",
        "canny_high_help": "Ng∆∞·ª°ng cao cho ph√°t hi·ªán c·∫°nh Canny",
        "upload_image": "T·∫£i l√™n m·ªôt h√¨nh ·∫£nh",
        "use_example": "S·ª≠ d·ª•ng h√¨nh ·∫£nh m·∫´u",
        "upload_prompt": "### Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.\n·ª®ng d·ª•ng s·∫Ω ph√°t hi·ªán c√°c h√¨nh tr√≤n trong h√¨nh ·∫£nh v√† cho ph√©p b·∫°n xem c√°c k√≠ch th∆∞·ªõc c·ªßa ch√∫ng.\n\n#### M·∫πo ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët nh·∫•t:\n- S·ª≠ d·ª•ng h√¨nh ·∫£nh c√≥ h√¨nh tr√≤n r√µ r√†ng\n- ƒêi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ph√°t hi·ªán ·ªü thanh b√™n n·∫øu h√¨nh tr√≤n kh√¥ng ƒë∆∞·ª£c ph√°t hi·ªán ƒë√∫ng\n- ƒê·ªÉ ƒëo l∆∞·ªùng ch√≠nh x√°c trong th·ª±c t·∫ø, cung c·∫•p t·ª∑ l·ªá ƒë√∫ng (pixel tr√™n ƒë∆°n v·ªã)",
        "detected_circles": "H√¨nh ·∫¢nh v·ªõi C√°c H√¨nh Tr√≤n ƒê∆∞·ª£c Ph√°t Hi·ªán",
        "click_prompt": "üëÜ Nh·∫•p v√†o m·ªôt h√¨nh tr√≤n ƒë·ªÉ ch·ªçn v√† xem chi ti·∫øt",
        "reset_selection": "ƒê·∫∑t L·∫°i L·ª±a Ch·ªçn",
        "x_coordinate": "T·ªça ƒë·ªô X",
        "y_coordinate": "T·ªça ƒë·ªô Y",
        "select_circle_coords": "Ch·ªçn H√¨nh Tr√≤n t·∫°i T·ªça ƒê·ªô",
        "no_circle_warning": "Kh√¥ng t√¨m th·∫•y h√¨nh tr√≤n t·∫°i ho·∫∑c g·∫ßn t·ªça ƒë·ªô n√†y",
        "show_preprocessed": "Hi·ªÉn Th·ªã H√¨nh ·∫¢nh ƒê√£ Ti·ªÅn X·ª≠ L√Ω",
        "preprocessed_image": "H√¨nh ·∫¢nh ƒê√£ Ti·ªÅn X·ª≠ L√Ω",
        "circle_info": "Th√¥ng Tin H√¨nh Tr√≤n",
        "num_circles": "S·ªë l∆∞·ª£ng h√¨nh tr√≤n ƒë∆∞·ª£c ph√°t hi·ªán: ",
        "select_circle": "Ch·ªçn m·ªôt h√¨nh tr√≤n ƒë·ªÉ xem chi ti·∫øt",
        "circle_properties": "#### Thu·ªôc T√≠nh H√¨nh Tr√≤n",
        "center": "**T√¢m:** ",
        "radius": "**B√°n k√≠nh:** ",
        "diameter": "**ƒê∆∞·ªùng k√≠nh:** ",
        "area": "**Di·ªán t√≠ch:** ",
        "circumference": "**Chu vi:** ",
        "pixels": " pixel",
        "sq_pixels": " pixel vu√¥ng",
        "scale_section": "#### T√πy ch·ªçn: Chuy·ªÉn ƒë·ªïi sang ƒë∆°n v·ªã th·ª±c t·∫ø",
        "scale_factor": "Pixel tr√™n ƒë∆°n v·ªã (v√≠ d·ª•: pixel/mm)",
        "units": " ƒë∆°n v·ªã",
        "sq_units": " ƒë∆°n v·ªã vu√¥ng",
        "no_circles": "Kh√¥ng ph√°t hi·ªán h√¨nh tr√≤n n√†o. Th·ª≠ ƒëi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ·ªü thanh b√™n.",
        "suggestions": "#### ƒê·ªÅ xu·∫•t ƒë·ªÉ c·∫£i thi·ªán ph√°t hi·ªán:\n1. Th·ª≠ gi·∫£m Ng∆∞·ª°ng Ph√°t Hi·ªán H√¨nh Tr√≤n (param2)\n2. ƒêi·ªÅu ch·ªânh gi√° tr·ªã B√°n K√≠nh T·ªëi Thi·ªÉu/T·ªëi ƒêa ƒë·ªÉ ph√π h·ª£p v·ªõi h√¨nh tr√≤n c·ªßa b·∫°n\n3. TƒÉng Ng∆∞·ª°ng Ph√°t Hi·ªán C·∫°nh (param1) ƒë·ªÉ c√≥ h√¨nh tr√≤n r√µ r√†ng h∆°n\n4. B·∫≠t T√πy Ch·ªçn N√¢ng Cao ƒë·ªÉ ki·ªÉm so√°t chi ti·∫øt h∆°n",
        "quick_guide": "## H∆∞·ªõng D·∫´n Nhanh",
        "quick_guide_content": """
        ·ª®ng d·ª•ng n√†y gi√∫p b·∫°n ƒëo l∆∞·ªùng c√°c h√¨nh tr√≤n trong h√¨nh ·∫£nh c·ªßa b·∫°n. ƒê√¢y l√† c√°ch s·ª≠ d·ª•ng:

        #### üîç C√°c B∆∞·ªõc C∆° B·∫£n:
        1. **T·∫£i l√™n m·ªôt h√¨nh ·∫£nh** s·ª≠ d·ª•ng c√¥ng c·ª• t·∫£i l√™n ·ªü tr√™n
        2. **C√°c h√¨nh tr√≤n s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ph√°t hi·ªán** v√† ƒë√°nh s·ªë trong h√¨nh ·∫£nh
        3. **Ch·ªçn m·ªôt h√¨nh tr√≤n** b·∫±ng c√°ch:
           - Nh·∫•p v√†o n√∫t "Ch·ªçn H√¨nh Tr√≤n t·∫°i T·ªça ƒê·ªô" sau khi nh·∫≠p gi√° tr·ªã X v√† Y
           - S·ª≠ d·ª•ng menu th·∫£ xu·ªëng ·ªü b√™n ph·∫£i
        4. **Xem c√°c k√≠ch th∆∞·ªõc** bao g·ªìm b√°n k√≠nh, ƒë∆∞·ªùng k√≠nh v√† di·ªán t√≠ch c·ªßa h√¨nh tr√≤n ƒë√£ ch·ªçn

        #### üí° C·∫ßn K·∫øt Qu·∫£ T·ªët H∆°n?
        - N·∫øu h√¨nh tr√≤n kh√¥ng ƒë∆∞·ª£c ph√°t hi·ªán ch√≠nh x√°c, ƒëi·ªÅu ch·ªânh "Ng∆∞·ª°ng Ph√°t Hi·ªán H√¨nh Tr√≤n" ·ªü thanh b√™n tr√°i (gi√° tr·ªã th·∫•p h∆°n s·∫Ω t√¨m th·∫•y nhi·ªÅu h√¨nh tr√≤n h∆°n)
        - ƒê·ªÉ ƒëo l∆∞·ªùng th·ª±c t·∫ø (nh∆∞ centim√©t), s·ª≠ d·ª•ng ph·∫ßn "T√πy ch·ªçn: Chuy·ªÉn ƒë·ªïi sang ƒë∆°n v·ªã th·ª±c t·∫ø"
        
        #### üõ†Ô∏è M·∫πo ƒë·ªÉ Th√†nh C√¥ng:
        - S·ª≠ d·ª•ng h√¨nh ·∫£nh r√µ r√†ng v·ªõi h√¨nh tr√≤n ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a t·ªët
        - ƒê·∫£m b·∫£o c√≥ ƒë·ªô t∆∞∆°ng ph·∫£n t·ªët gi·ªØa h√¨nh tr√≤n v√† n·ªÅn
        - Th·ª≠ h√¨nh ·∫£nh m·∫´u tr∆∞·ªõc ƒë·ªÉ xem c√°ch ·ª©ng d·ª•ng ho·∫°t ƒë·ªông
        """
    }
}

# Set page configuration
st.set_page_config(
    page_title="Circle Diameter Viewer",
    layout="wide"
)

# Language selection
language = st.sidebar.selectbox(
    "Language / Ng√¥n ng·ªØ",
    ["English", "Ti·∫øng Vi·ªát"],
    index=0
)

# Set language code
lang_code = "en" if language == "English" else "vi"
t = translations[lang_code]  # Get translations for selected language

# Title and description
st.title(t["app_title"])
st.markdown(t["app_description"])

# Quick guide section (new addition)
with st.expander(t["quick_guide"], expanded=False):
    st.markdown(t["quick_guide_content"])

# Sidebar for parameters
st.sidebar.header(t["detection_params"])

# Advanced options toggle
show_advanced = st.sidebar.checkbox(t["advanced_options"], value=False)

# Basic parameters
dp = st.sidebar.slider(t["dp_title"], 1.0, 5.0, 1.0, 0.1,
                       help=t["dp_help"])
min_dist = st.sidebar.slider(t["min_dist_title"], 10, 100, 20,
                             help=t["min_dist_help"])
param1 = st.sidebar.slider(t["param1_title"], 10, 300, 50,
                           help=t["param1_help"])
param2 = st.sidebar.slider(t["param2_title"], 10, 100, 30,
                           help=t["param2_help"])
min_radius = st.sidebar.slider(t["min_radius_title"], 0, 100, 10,
                               help=t["min_radius_help"])
max_radius = st.sidebar.slider(t["max_radius_title"], 10, 300, 100,
                               help=t["max_radius_help"])

# Advanced parameters
if show_advanced:
    st.sidebar.subheader(t["preprocessing_options"])
    apply_blur = st.sidebar.checkbox(t["apply_blur"], value=True)
    blur_kernel = st.sidebar.slider(t["blur_kernel"], 3, 15, 5, 2,
                                    help=t["blur_kernel_help"])
    apply_contrast = st.sidebar.checkbox(t["enhance_contrast"], value=False)
    contrast_clip = st.sidebar.slider(t["clahe_clip"], 1.0, 5.0, 2.0, 0.1,
                                      help=t["clahe_clip_help"])
    apply_canny = st.sidebar.checkbox(t["apply_canny"], value=False)
    canny_low = st.sidebar.slider(t["canny_low"], 10, 200, 50,
                                  help=t["canny_low_help"])
    canny_high = st.sidebar.slider(t["canny_high"], 50, 500, 150,
                                   help=t["canny_high_help"])

# Function to detect circles


def detect_circles(image, dp, min_dist, param1, param2, min_radius, max_radius,
                   apply_blur=True, blur_kernel=5, apply_contrast=False, contrast_clip=2.0,
                   apply_canny=False, canny_low=50, canny_high=150):
    # Convert image to grayscale if it has multiple channels
    if len(image.shape) > 2:
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    else:
        gray = image

    # Apply pre-processing based on settings
    # Ensure blur kernel is odd
    if blur_kernel % 2 == 0:
        blur_kernel += 1

    # Apply Gaussian blur if selected
    if apply_blur:
        gray = cv2.GaussianBlur(gray, (blur_kernel, blur_kernel), 0)

    # Apply contrast enhancement if selected
    if apply_contrast:
        clahe = cv2.createCLAHE(clipLimit=contrast_clip, tileGridSize=(8, 8))
        gray = clahe.apply(gray)

    # Apply Canny edge detection if selected
    if apply_canny:
        gray = cv2.Canny(gray, canny_low, canny_high)

    # Detect circles using HoughCircles
    circles = cv2.HoughCircles(
        gray,
        cv2.HOUGH_GRADIENT,
        dp=dp,
        minDist=min_dist,
        param1=param1,
        param2=param2,
        minRadius=min_radius,
        maxRadius=max_radius
    )

    # Optional: display pre-processed image
    return circles, gray

# Function to draw circles and numbers on the image


def draw_circles_with_numbers(image, circles, highlight_idx=None):
    # Create a copy of the image to draw on
    img_with_circles = image.copy()

    # If circles were found
    if circles is not None:
        circles = np.uint16(np.around(circles))
        for i, (x, y, r) in enumerate(circles[0, :]):
            # Set circle color - highlight the selected circle
            circle_color = (0, 255, 0)  # Default: green
            if highlight_idx is not None and i == highlight_idx:
                circle_color = (255, 0, 255)  # Magenta for highlighted circle

            # Draw the outer circle
            cv2.circle(img_with_circles, (x, y), r, circle_color, 2)
            # Draw the center of the circle
            cv2.circle(img_with_circles, (x, y), 2, (0, 0, 255), 3)
            # Draw number for identification - prevent overflow by ensuring positive values
            text_x = max(0, x - 10)
            text_y = max(20, y - 10)
            cv2.putText(img_with_circles, str(i+1), (text_x, text_y),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)

    return img_with_circles

# Function to calculate circle properties


def calculate_circle_properties(radius_px, pixel_scale=1.0):
    radius = radius_px * pixel_scale
    diameter = 2 * radius
    area = math.pi * (radius ** 2)
    circumference = 2 * math.pi * radius

    return {
        "radius": radius,
        "diameter": diameter,
        "area": area,
        "circumference": circumference
    }

# Create example image with circles for demonstration


def create_example_image():
    # Create a blank image
    img = np.zeros((500, 500, 3), dtype=np.uint8)
    img.fill(255)  # White background

    # Draw circles
    centers = [(150, 150, 50), (300, 200, 70), (200, 350, 40), (350, 350, 30)]
    for x, y, r in centers:
        cv2.circle(img, (x, y), r, (0, 0, 0), 2)

    return img

# Function to find the nearest circle to a clicked point


def find_nearest_circle(circles, click_x, click_y):
    if circles is None:
        return None

    circles = np.uint16(np.around(circles))
    min_dist = float('inf')
    nearest_idx = None

    for i, (x, y, r) in enumerate(circles[0, :]):
        # Check if the click is inside or near the circle
        dist = math.sqrt((x - click_x)**2 + (y - click_y)**2)

        # If the click is inside the circle or within 10 pixels of the edge
        if dist <= r + 10:
            if dist < min_dist:
                min_dist = dist
                nearest_idx = i

    return nearest_idx


# Initialize session state for selected circle
if 'selected_circle_idx' not in st.session_state:
    st.session_state.selected_circle_idx = None

# File uploader for image input
uploaded_file = st.file_uploader(
    t["upload_image"], type=["jpg", "jpeg", "png"])

# Process image
if uploaded_file is not None:
    # Read the image
    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)

    # Convert to RGB for display
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
else:
    # Use example image
    use_example = st.checkbox(t["use_example"], value=True)
    if use_example:
        image = create_example_image()
        image_rgb = image.copy()
    else:
        st.markdown(t["upload_prompt"])
        st.stop()

# Detect circles with advanced parameters if enabled
if show_advanced:
    circles, processed_gray = detect_circles(
        image, dp, min_dist, param1, param2, min_radius, max_radius,
        apply_blur, blur_kernel, apply_contrast, contrast_clip,
        apply_canny, canny_low, canny_high
    )
else:
    circles, processed_gray = detect_circles(
        image, dp, min_dist, param1, param2, min_radius, max_radius
    )

# Create columns for layout
col1, col2 = st.columns([3, 2])

with col1:
    st.subheader(t["detected_circles"])

    # Draw circles on the image with highlighting
    image_with_circles = draw_circles_with_numbers(
        image_rgb, circles, st.session_state.selected_circle_idx)

    # Display image and capture clicks
    image_placeholder = st.empty()
    image_placeholder.image(image_with_circles, use_container_width=True)

    # Add click interaction if circles are found
    if circles is not None:
        st.markdown(t["click_prompt"])

        # Add a clickable image using streamlit's image_click capability
        if 'image_clicked' not in st.session_state:
            st.session_state.image_clicked = False

        # Get the actual displayed size to scale the coordinates
        img_height, img_width = image_rgb.shape[:2]

        # Create a clickable area
        click_col = st.columns(1)[0]
        with click_col:
            clicked = st.button(t["reset_selection"])
            if clicked:
                st.session_state.selected_circle_idx = None
                st.rerun()

        # For now we use a coordinate input as a workaround since Streamlit doesn't
        # directly support image clicks in the standard library
        click_cols = st.columns(2)
        with click_cols[0]:
            click_x = st.number_input(t["x_coordinate"], 0, img_width, img_width //
                                      2 if 'click_x' not in st.session_state else st.session_state.get('click_x', 0), key="click_x")
        with click_cols[1]:
            click_y = st.number_input(t["y_coordinate"], 0, img_height, img_height //
                                      2 if 'click_y' not in st.session_state else st.session_state.get('click_y', 0), key="click_y")

        clicked = st.button(t["select_circle_coords"])
        if clicked:
            nearest_idx = find_nearest_circle(circles, click_x, click_y)
            if nearest_idx is not None:
                st.session_state.selected_circle_idx = nearest_idx
                st.rerun()
            else:
                st.warning(t["no_circle_warning"])

    # Show pre-processed image if advanced options are enabled
    if show_advanced:
        show_processed = st.checkbox(t["show_preprocessed"], value=False)
        if show_processed:
            st.subheader(t["preprocessed_image"])
            st.image(processed_gray, use_container_width=True)

with col2:
    st.subheader(t["circle_info"])

    if circles is not None:
        circle_count = circles.shape[1]
        st.write(f"{t['num_circles']}{circle_count}")

        # Create a selection dropdown for circles
        circle_numbers = [
            f"{t['select_circle'].split()[0]} {i+1}" for i in range(circle_count)]
        if circle_numbers:
            selected_circle = st.selectbox(
                t["select_circle"],
                circle_numbers,
                index=st.session_state.selected_circle_idx if st.session_state.selected_circle_idx is not None else 0
            )

            # Update the session state to match the dropdown
            idx = int(selected_circle.split()[-1]) - 1
            if idx != st.session_state.selected_circle_idx:
                st.session_state.selected_circle_idx = idx
                st.rerun()

            if selected_circle:
                # Get the selected circle data
                x, y, r = circles[0, idx]

                # Calculate properties
                properties = calculate_circle_properties(r)

                # Display properties
                st.markdown(t["circle_properties"])
                st.markdown(f"{t['center']}({x}, {y})")
                st.markdown(f"{t['radius']}{r:.2f}{t['pixels']}")
                st.markdown(f"{t['diameter']}{2*r:.2f}{t['pixels']}")
                st.markdown(
                    f"{t['area']}{math.pi * (r ** 2):.2f}{t['sq_pixels']}")
                st.markdown(
                    f"{t['circumference']}{2 * math.pi * r:.2f}{t['pixels']}")

                # Optional: Add scaling to real-world units
                st.markdown("---")
                st.markdown(t["scale_section"])
                scale_factor = st.number_input(t["scale_factor"],
                                               min_value=0.01, value=1.0, step=0.01)

                if scale_factor > 0:
                    real_radius = r / scale_factor
                    real_diameter = 2 * real_radius
                    real_area = math.pi * (real_radius ** 2)
                    real_circumference = 2 * math.pi * real_radius

                    st.markdown(f"{t['radius']}{real_radius:.2f}{t['units']}")
                    st.markdown(
                        f"{t['diameter']}{real_diameter:.2f}{t['units']}")
                    st.markdown(f"{t['area']}{real_area:.2f}{t['sq_units']}")
                    st.markdown(
                        f"{t['circumference']}{real_circumference:.2f}{t['units']}")
    else:
        st.write(t["no_circles"])

        # Provide suggestions for improving detection
        st.markdown(t["suggestions"])
